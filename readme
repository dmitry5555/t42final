== run
make up / build / down
or
docker-compose -f ./docker-compose.yml up -d


== 
find the line with ip and change to local pc ip if you want to play with 'server'
const client = new W3CWebSocket ...

== use
localhost:8000
localhost:3000

== back
game/ws path: django / myapp / consumers.py

работает на беке, возвращает 2 координаты на фронт (мяча)
добавится координата соперника

== front
localhost:3000 -> websockets in menu
canvas/ws path:
next-js / components / New.js

с фронта передается лишь 1 цифра с позицией X игрока

https://circumeo.io/blog/entry/django-websockets/


== db schema

	class Meta:
		model = User
		fields = ['id', 'username', 'email', 'password']
		extra_kwargs = {'password': {'write_only': True}}
	
	class Meta:
		model = Games
		fields = ['id', 'user_one_id', 'user_two_id', 'user_one_score', 'user_two_score', 'created_at', 'updated_at', 'status']
	
	class Meta:
		model = Image
		fields = ('id', 'image', 'uploaded_at')

	class Meta:
		model = Profile
		fields = ['id', 'user_id', 'username', 'created_at', 'avatar_url', 'is_online']

============================================================================
далее
при входе выбор игры (передается параметром в компонент)
	- игра с компом (добавить движение ракеткой 2)
	- 1-1 на компе - ввод данных игроков (регистрация?)
	- торнамент - получается просто ввод количества, ввод имен и игра по кругу
	- 1-1 удаленно (ожидание 2го игрока в одном сокете, проверить третье соединение)



===
styles

text screen
w-96 py-4 mx-auto flex flex-col gap-2

button
border-2 py-2 px-4 mt-4 opacity-100 text-sm mx-auto

input
mx-auto gap-3 flex flex-col
	flex flex-row items-center
		w-1/2
		w-1/2 px-2 py-1 text-black